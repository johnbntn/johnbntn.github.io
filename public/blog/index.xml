<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Some Interesting Things</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content in Blog on Some Interesting Things</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Aug 2025 09:47:53 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hacking a Pass Together in LLVM&#39;s OCaml Bindings</title>
      <link>http://localhost:1313/ocaml-llvm-pass/</link>
      <pubDate>Sun, 03 Aug 2025 09:47:53 -0400</pubDate>
      <guid>http://localhost:1313/ocaml-llvm-pass/</guid>
      <description>If you&amp;rsquo;re writing a production quality compiler, it&amp;rsquo;s no longer good enough to just have correct code, you need speed. Compiler optimizations have become an incredibly important aspect of modern compiler design and will only grow in importance as languages are developed for increasingly specialized, computation heavy domains.&#xA;What is LLVM? LLVM (which doesn&amp;rsquo;t stand for anything) is a codegen and optimization engine. It stands out for being architecture independent, so you can write optimizations in LLVM&amp;rsquo;s IR and let LLVM handle generating code for specific architectures.</description>
    </item>
    <item>
      <title>Baladys_anomaly</title>
      <link>http://localhost:1313/baladys_anomaly/</link>
      <pubDate>Sun, 25 May 2025 20:24:03 -0400</pubDate>
      <guid>http://localhost:1313/baladys_anomaly/</guid>
      <description></description>
    </item>
    <item>
      <title>Parikh&#39;s Theorem</title>
      <link>http://localhost:1313/parikhs-theorem/</link>
      <pubDate>Sun, 25 May 2025 20:23:31 -0400</pubDate>
      <guid>http://localhost:1313/parikhs-theorem/</guid>
      <description>Don&amp;rsquo;t let the lobbyists at big PDA have you thinking there&amp;rsquo;s only one way to prove a language is context free. Parikh&amp;rsquo;s theorem is a helpful alternative when a pda seems too complex to draw. In this post we&amp;rsquo;ll go over Parikh&amp;rsquo;s Theorem, its proof, and how to use it. Strap in because it&amp;rsquo;s gonna be a wild ride.&#xA;Background Like any good TCS concept, Parikh&amp;rsquo;s Theorem starts with a slightly intimidating amount of definitions.</description>
    </item>
    <item>
      <title>Ogden&#39;s Theorem and Inherent Ambiguity</title>
      <link>http://localhost:1313/ogdens-theorem/</link>
      <pubDate>Fri, 25 Apr 2025 20:23:22 -0400</pubDate>
      <guid>http://localhost:1313/ogdens-theorem/</guid>
      <description>The pumping lemma for context free languages is a useful tool to prove a language to be non context free. But sometimes proofs about CFLs require more powerful tools. William Ogden, during his PhD at Stanford, published a paper that describes a way to generalize a the pumping lemma, allowing you to, in a sense, &amp;ldquo;choose where to pump&amp;rdquo;.&#xA;But why study it? Well, most notably, the theorem lends itself well to a proof about the inherent ambiguity of CFLs; less notably, I think it&amp;rsquo;s cool.</description>
    </item>
    <item>
      <title>A Beginners Guide to the Learning With Errors Problem</title>
      <link>http://localhost:1313/a-beginners-guide-to-the-learning-with-errors-problem/</link>
      <pubDate>Mon, 24 Mar 2025 16:36:09 -0400</pubDate>
      <guid>http://localhost:1313/a-beginners-guide-to-the-learning-with-errors-problem/</guid>
      <description>Learning Learning with Errors with Errors Why am I writing this&#xA;my experience learning was a hodgepodge of blog posts, lecture notes, and research papers, all of which assume varying degrees of previous knowledge. Create a central starting point for someone interested in LWE/crypto with the only assumption being a reasonable intuition about lattices Provide code as well as some short proof ideas Also more resources to go in depth about a topic Why LWE FHE Quantum Resistant Public key generation The Basics key, vector, packed message, noise Go over generation Modulus Switching Key Switching Security Guaranty Variants </description>
    </item>
  </channel>
</rss>

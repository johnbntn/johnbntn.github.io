<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Some Interesting Things</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Home on Some Interesting Things</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Aug 2025 09:47:53 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hacking a Pass Together in LLVM&#39;s OCaml Bindings</title>
      <link>http://localhost:1313/ocaml-llvm-pass/</link>
      <pubDate>Sun, 03 Aug 2025 09:47:53 -0400</pubDate>
      <guid>http://localhost:1313/ocaml-llvm-pass/</guid>
      <description>If you&amp;rsquo;re writing a production quality compiler, it&amp;rsquo;s no longer good enough to just have correct code, you need speed. Compiler optimizations have become an incredibly important aspect of modern compiler design and will only grow in importance as languages are developed for increasingly specialized, computation heavy domains.&#xA;What is LLVM? LLVM (which doesn&amp;rsquo;t stand for anything) is a codegen and optimization engine. It stands out for being architecture independent, so you can write optimizations in LLVM&amp;rsquo;s IR and let LLVM handle generating code for specific architectures.</description>
    </item>
    <item>
      <title>Ogden&#39;s Theorem and Inherent Ambiguity</title>
      <link>http://localhost:1313/ogdens-theorem/</link>
      <pubDate>Fri, 25 Apr 2025 20:23:22 -0400</pubDate>
      <guid>http://localhost:1313/ogdens-theorem/</guid>
      <description>The pumping lemma for context free languages is a useful tool to prove a language to be non context free. But sometimes proofs about CFLs require more powerful tools. William Ogden, during his PhD at Stanford, published a paper that describes a way to generalize a the pumping lemma, allowing you to, in a sense, &amp;ldquo;choose where to pump&amp;rdquo;.&#xA;But why study it? Well, most notably, the theorem lends itself well to a proof about the inherent ambiguity of CFLs; less notably, I think it&amp;rsquo;s cool.</description>
    </item>
    <item>
      <title>Nittany Motorsports</title>
      <link>http://localhost:1313/projects/fsae/</link>
      <pubDate>Sat, 05 Apr 2025 12:52:32 -0400</pubDate>
      <guid>http://localhost:1313/projects/fsae/</guid>
      <description>Nittany Motorsports Here are some projects I did for Nittany Motorsports, Penn State&amp;rsquo;s FSAE Team:&#xA;LV BMS Wrote firmware for a low voltage (20V) passive BMS system for a FSAE vehicle. This was done using an STM32L432KC and a BQ76905 BMS chip. The system communicates over I2C and also sends CAN to the vehicle&amp;rsquo;s bus. There is support for a multitude of protections including over/under voltage, over/under temperature, short circuit in charge/discharge, and more.</description>
    </item>
    <item>
      <title>Datalog Program Analysis</title>
      <link>http://localhost:1313/projects/datalog_program_analysis/</link>
      <pubDate>Fri, 03 Jan 2025 14:18:11 -0400</pubDate>
      <guid>http://localhost:1313/projects/datalog_program_analysis/</guid>
      <description>Datalog Program Analysis Datalog is a logical programming language that is closely related to Prolog. You can think of it as Prolog that always terminates. Recently, there has been some research regarding Datalog&amp;rsquo;s use in program analysis [1, 2, 3]&#xA;I used BAP (Binary Analysis Program) to generate Datalog facts about a binary for easier analysis and replicated the BAP tutorial using Datalog in significantly less code. Here is the repository.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/all-posts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/all-posts/</guid>
      <description>All Posts Theory Ogdens&amp;rsquo; Theorem Programming Languages and Compilers Hacking a Pass Together in LLVM&amp;rsquo;s OCaml Bindings </description>
    </item>
  </channel>
</rss>
